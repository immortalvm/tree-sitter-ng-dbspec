import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java-library'
    id 'maven-publish'
}

group = 'no.nr'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation("io.github.bonede:tree-sitter:0.22.6")
    testImplementation(platform(libs.junit.bom))
    testImplementation("org.junit.jupiter:junit-jupiter")
    // https://stackoverflow.com/a/77605392
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

test {
    useJUnitPlatform()
}

def libName = "tree-sitter-ng-dbspec"

java {
    withJavadocJar()
    withSourcesJar()
}

processResources {
    dependsOn("buildNative")
}

sourcesJar {
    // Native binaries are not source files
    exclude("lib")
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/immortalvm/tree-sitter-ng-dbspec"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        // IntelliJ warnings can be ignored:
        // https://youtrack.jetbrains.com/issue/IDEA-338343/Publishing-DSL-has-various-IDE-warnings-and-errors-with-Groovy-DSL
        maven(MavenPublication) {
            from components.java
            pom {
                name = libName
                url = "https://github.com/immortalvm/tree-sitter-ng-dbspec"
                description = "DbSpec parser bindings"
                licenses {
                    license {
                        name = "MIT"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/immortalvm/tree-sitter-ng-dbspec.git"
                    developerConnection = "scm:git:https://github.com/immortalvm/tree-sitter-ng-dbspec.git"
                    url = "https://github.com/immortalvm/tree-sitter-ng-dbspec"
                }
            }
        }
    }
}


// The rest of this file is taken from https://github.com/bonede/tree-sitter-ng with some adjustments.

static String libExt(String target){
    if(target.contains("windows")){
        return "dll"
    }else if(target.contains("linux")){
        return "so"
    }else if(target.contains("macos")){
        return "dylib"
    }else{
        throw new GradleException("Does not support $target")
    }
}

static String jniMdInclude(String target) {
    if (target.contains("windows")) {
        return "win32"
    } else if (target.contains("linux")) {
        return "linux"
    } else if (target.contains("macos")) {
        return "darwin"
    } else {
        throw new GradleException("Does not support $target")
    }
}

tasks.register("buildNative") {
    group = "build"
    description = "Build parser native modules"

    def pd = layout.projectDirectory
    def jniSrcDir = pd.dir("src/main/c")
    def jniOutDir = pd.dir("src/main/resources/lib")
    def jniCFile = jniSrcDir.file("no_nr_TreeSitterDbspec.c")
    def libSrcDir = pd.dir("tree-sitter-dbspec/src")
    def jniInclude = pd.dir("include/jni")

    def srcFiles = fileTree(libSrcDir) {
        include("parser.c")
        include("scanner.c")
    }.toList()
    inputs.files(srcFiles)
    inputs.file(jniCFile)
    inputs.file(pd.file("gradle.properties"))

    def targets = ["x86_64-windows", "x86_64-macos", "x86_64-linux-gnu", "aarch64-linux-gnu", "aarch64-macos"]
    def outputFiles = targets.collect() { t ->
        String ext = libExt(t)
        jniOutDir.file("$t-$libName.$ext")
    }
    outputs.files(outputFiles)

    doLast {
        mkdir(jniOutDir)
        // This is a standard way to "zip" two lists in using Groovy.
        [targets, outputFiles].transpose().each { String target, RegularFile jniOutFile ->
            def cmd = [
                    DefaultNativePlatform.currentOperatingSystem.windows ? "zig.exe" : "zig",
                    "c++",
                    "-g0",
                    // No effect:
                    // "-Wno-dll-attribute-on-redeclaration",
                    "-shared",
                    "-target", target,
                    "-I", libSrcDir,
                    "-I", jniInclude,
                    "-I", jniInclude.dir(jniMdInclude(target)),
                    "-o", jniOutFile,
                    jniCFile,
            ]
            cmd.addAll(srcFiles)
            exec {
                workingDir(jniSrcDir)
                commandLine(cmd)
            }
        }

        // Remove Windows debug files
        def files = fileTree(jniOutDir) {
            include("**/*.pdb")
            include("**/*.lib")
        }
        delete(files)
    }
}
